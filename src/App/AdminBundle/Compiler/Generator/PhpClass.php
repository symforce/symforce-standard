<?php

namespace App\AdminBundle\Compiler\Generator;

class PhpClass extends \CG\Generator\PhpClass {
    
    /**
     * @var \App\AdminBundle\Compiler\Generator\PhpWriter
     */
    protected $lazy_writer ;
    
    protected $lazy_properties  = array() ;
    
    /**
     * @param string $name
     * @return \App\AdminBundle\Compiler\Generator\PhpMethod
     */
    public function addMethod( $name ) {
        $method  = new PhpMethod($name) ;
        $method
                ->setFinal(true)
                ->setVisibility('protected')
                ;
        $this->setMethod( $method ) ;
        return $method ;
    }

    /**
     * @param string $name
     * @param string $key
     * @param mixed $value
     * @return \App\AdminBundle\Compiler\Generator\PhpClass
     */
    public function addLazyArray($name, $key, $value ) {
        if( !isset($this->lazy_properties[$name]) ) {
            $this->lazy_properties[$name]   = array() ;
        }
        if( isset($this->lazy_properties[$name][ $key ]) ) {
            if( is_array($this->lazy_properties[$name][ $key ]) && is_array($value) ) {
                $this->lazy_properties[$name][ $key ]  = array_merge( $this->lazy_properties[$name][ $key ] , $value  ) ;
            } else {
                throw new \Exception( sprintf( 'overwride lazy property for %s->%s[%s] ', $this->getName(), $name, $key ) );
            }
        } else {
            $this->lazy_properties[$name][ $key ]   = $value ;
        }
        return $this ;
    }

    /**
     * @return \App\AdminBundle\Compiler\Generator\PhpWriter
     */
    public function getLazyWriter() {
        if( null === $this->lazy_writer ) {
            $method = $this->addMethod('__wakeup') ; 
            $this->lazy_writer  = $method->getWriter() ;
            
        }
        return $this->lazy_writer  ;
    }
    
    /**
     * @param string $name
     * @param mixed $value
     * @param string $type
     * @param bool $_get
     * @param string $visibility
     * @param bool $_lazy
     * @return \App\AdminBundle\Compiler\Generator\PhpProperty
     */
    public function addProperty($name, $value, $type = null , $_get = false, $visibility = 'protected', $_lazy = false ) {
        $property   = new PhpProperty($name) ;
        if( null === $type ) {
            $type   = is_object( $value ) ? get_class( $value ) : gettype( $value ) ;
        }
        $property
                ->setClass( $this )
                ->setDocblock('/** @var ' . $type . ' */')
                ->setVisibility($visibility)
                ->setDefaultValue($value)
                ->useGetter( $_get )
                ->setLazy( $_lazy )
                ;
        return $this ;
    }
    
    public function propertyEncode( $object ){
        if(is_object($object)) {
            throw new \Exception('can not encode object') ;
        } else if( is_array( $object) ) {
            return var_export($object, 1) ;
        } else {
            return json_encode($object) ;
        } 
    }

    public function writeCache() {
        
        static $root_dir    = null ;
        if( null == $root_dir ) {
            $root_dir   = realpath( str_replace(str_replace('\\', '/', __NAMESPACE__) , '', __DIR__) . '/../app/Resources/AppAdminBundle/src' ) . '/' ;
        }
        
        $writer = new \App\AdminBundle\Compiler\Generator\PhpWriter();
        
        $parts = explode("\\", $this->getName() );
        
        if( empty($parts) ) {
            throw new \Exception('not class name') ;
        }
        
        $cache_path    = $root_dir . join('/', $parts ) . '.php' ;
        
        $shortName = array_pop($parts);
        
        $writer
            ->writeln("<?php\n")
        ;

        if ($parts) { 
            $writer->writeln("namespace ".implode("\\", $parts).";\n");
        }
        
        $imports    = $this->getUseStatements() ; 
        
        foreach($imports as $alias => $use ) {
            $_alias = substr( $use, -1 - strlen($alias) );
            if( $_alias == '\\' . $alias ) {
                $writer->writeln(sprintf("use %s ;", $use));
            } else {
                $writer->writeln(sprintf("use %s as %s ;", $use, $alias));
            }
        }
        
        $writer
            ->writeln('')
            ->writeln('/**')
            ->writeln(' * This code has been auto-generated by the AppAdminBundule')
            ->writeln(' * Manual changes to it will be lost.')
            ->writeln(' */')
            ;
        
        if( $this->isAbstract() ) {
            $writer->write('abstract ');
        } else if( $this->isFinal() ) {
            $writer->write('final ') ;
        }
        
        $writer       
            ->write('class '.  $shortName ) ;
           
        if( $this->getParentClassName() ) {
            $writer->write(' extends ' . $this->getParentClassName() ) ;
        }
       
        $writer->writeln(' {')
            ->indent()
        ;
        
        $lazy_writer    = $this->getLazyWriter() ;
       
        foreach( $this->getProperties() as $property ) {
            $property->writeCache($lazy_writer, $writer) ;
        }
        
        foreach($this->lazy_properties as $name => $value ) {
            $writer->writeln("\npublic \${$name} = " . $this->propertyEncode($value)  . " ;") ;
            // $lazy_writer->writeln( '$this->' . $name . ' = ' .  . ' ; ' );
        }
        
        if( $this->hasMethod( '__wakeup' ) ) {
            $lazy_writer->writeln(  $this->getMethod('__wakeup')->getBody() ) ; 
            $this->getMethod('__wakeup')->setBody( $lazy_writer->getContent() ) ;
        } else {
            $this->setMethod(\CG\Generator\PhpMethod::create('__wakeup')
                ->setFinal(true)
                ->setVisibility('protected')
                ->setBody( $lazy_writer->getContent() )
            );
        }
        
        foreach( $this->getMethods() as $method ) {
            
            if( $method instanceof PhpMethod) {
                $method->flushLazyCode() ;
                $_body  = $method->getWriter()->getContent() ;
            } else {
                $_body  = $method->getBody() ;
            }
            
            $writer->write("\n") ;
            if( $method->getDocblock() ) {
                $writer->writeln( $method->getDocblock() ) ;
            }
            if( $method->isFinal() ) {
                $writer ->write('final ') ;
            }
            $writer
                    ->write( $method->getVisibility() ) 
                    ->write( ' function ' ) 
                    ->write( $method->getName() ) 
                    ;
            $ps = $method->getParameters()  ;
            if( empty($ps) ) {
                $writer->write('()') ;
            } else {
                $writer->writeln('(')->indent();
                foreach( $method->getParameters() as $i => $p) {
                    if( $p->getType() ) {
                        if( in_array( $p->getType(), array('mixed') ) ) {
                            $writer->write( '/** @var ' . $p->getType() . ' */') ;
                        } else {
                            $writer->write(  $p->getType() . ' ') ;
                        }
                    }
                    if( $p->isPassedByReference() ) {
                        $writer->write(' & ') ;
                    }
                    $writer
                            ->write(' $')
                            ->write( $p->getName() )
                            ;
                    if( $p->hasDefaultValue() ) {
                        $writer->write(' = ' .  json_encode( $p->getDefaultValue() ) ) ;
                    }
                    if( $i < count($ps) - 1 ) {
                        $writer->writeln(",");
                    } else {
                        $writer->write("\n");
                    }
                }
                
                $writer->writeln(')')->outdent();
            }
            
            $writer
                    ->writeln( '{' )
                        ->indent()
                        ->writeln( $_body )
                        ->outdent()
                    ->writeln("}")
                    ;
        }
        
        $writer
                ->outdent()
                ->writeln('}') ;
        
        $content    = $writer->getContent() ;
         
        // '#php{% $this->admin->trans("test.form.enabled.choices.no") %}'
        
        $content    = preg_replace_callback( self::PHP_CODE , function($m){
            return stripslashes($m[1]) ;
        } , $content ) ; 
         
        $cache_dir  = dirname($cache_path) ;
        if( !file_exists( $cache_dir) ) {
            mkdir( $cache_dir, 0755) ;
        }
        
        \Dev::write_file( $cache_path, $content ) ;
        
        return $cache_path ;
    }
    
    
    public function flush(\App\AdminBundle\Compiler\Generator $gen) {
        $this->writeCache() ;
    }
    
    const PHP_CODE = '/\'\#php\{\%\s(.+?)\s\%\}\'/s' ;
}